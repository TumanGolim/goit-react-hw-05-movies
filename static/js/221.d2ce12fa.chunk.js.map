{"version":3,"file":"static/js/221.d2ce12fa.chunk.js","mappings":"qMAIe,SAASA,IACtB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAcC,IAAmBC,EAAAA,EAAAA,OACjCC,EAAOC,IAAYL,EAAAA,EAAAA,UAASC,EAAaK,IAAI,UAAY,IAE1DC,EAAQN,EAAaK,IAAI,UAAY,KAa3CE,EAAAA,EAAAA,YAAU,KACHD,GAAmB,MAAVA,GAIdE,EAAiBF,GACdG,MAAKC,IACJ,IAAKA,EAAKC,cACR,OAAOC,MAAM,yCAADC,OAA0CP,EAAK,MAE7DR,EAASY,EAAKI,QAAQ,IAEvBC,OAAMC,GAASC,QAAQC,IAAIF,IAAO,GACpC,CAACV,IAEJ,MAAME,EAAmBW,UACvB,IAIE,aAHuBC,EAAAA,EAAAA,IAAU,4FAADP,OAC8DQ,KAE9EC,IAGlB,CAFE,MAAON,GACP,MAAMA,CACR,GAOF,OACEO,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAG,IAAGH,SAAC,UACbC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAG,UAASH,SAAC,eAErBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJD,EAAAA,EAAAA,MAAA,QAAMK,SAhDWC,IAEnB,GADAA,EAAEC,kBACG3B,EAAM4B,OACT,OAAOnB,MACL,0EAIJX,EAAgB,CAAEK,MAAOH,GAAQ,EAwCFqB,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAOO,KAAK,OAAO7B,MAAOA,EAAO8B,SAZbJ,IACxBzB,EAASyB,EAAEK,OAAO/B,MAAM,KAYpBsB,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAAQR,SAAC,eAExBC,EAAAA,EAAAA,KAAA,MAAAD,SACG3B,EAAMsC,KAAIC,IACTX,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAE,WAAAd,OAAauB,EAAMC,IAAKb,SAAEY,EAAME,SADjCF,EAAMC,UAOzB,C","sources":["components/Movies.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport axios from 'axios';\n\nexport default function Movies() {\n  const [films, setFilms] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [value, setValue] = useState(searchParams.get('query') || '');\n\n  const query = searchParams.get('query') || '*';\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    if (!value.trim()) {\n      return alert(\n        'Sorry, but we cannot find an empty string. You should write something.'\n      );\n    }\n\n    setSearchParams({ query: value });\n  };\n\n  useEffect(() => {\n    if (!query || query === '*') {\n      return;\n    }\n\n    fetchSearchMovie(query)\n      .then(info => {\n        if (!info.total_results) {\n          return alert(`Sorry, we didn't find any results for ${query}.`);\n        }\n        setFilms(info.results);\n      })\n      .catch(error => console.log(error));\n  }, [query]);\n\n  const fetchSearchMovie = async searchQuery => {\n    try {\n      const response = await axios.get(\n        `https://api.themoviedb.org/3/search/movie?api_key=6275ff62c216e0d575843f8efbbe5c76&query=${searchQuery}`\n      );\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const handleInputChange = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <div>\n      <div>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/movies\">Movies</Link>\n      </div>\n      <h2>Search Movies</h2>\n      <form onSubmit={onFormSubmit}>\n        <input type=\"text\" value={value} onChange={handleInputChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {films.map(movie => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"],"names":["Movies","films","setFilms","useState","searchParams","setSearchParams","useSearchParams","value","setValue","get","query","useEffect","fetchSearchMovie","then","info","total_results","alert","concat","results","catch","error","console","log","async","axios","searchQuery","data","_jsxs","children","_jsx","Link","to","onSubmit","e","preventDefault","trim","type","onChange","target","map","movie","id","title"],"sourceRoot":""}