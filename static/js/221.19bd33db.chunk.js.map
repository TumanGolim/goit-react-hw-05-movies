{"version":3,"file":"static/js/221.19bd33db.chunk.js","mappings":"8MAIA,MAoEA,EAlEeA,KACb,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,IA0CrD,OAdAG,EAAAA,EAAAA,YAAU,KACR,MACMC,EADS,IAAIC,gBAAgBT,EAASU,QAClBC,IAAI,UAAY,GAC1CR,EAASK,GAETI,aAAaC,QAAQ,eAAgB,UACrCD,aAAaC,QAAQ,QAASL,GAE9B,MAAMM,EAAuBF,aAAaG,QAAQ,kBAC9CD,GACFR,EAAkBU,KAAKC,MAAMH,GAC/B,GACC,CAACd,EAASU,UAGXQ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAG,IAAGH,SAAC,UACbC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAG,UAASH,SAAC,eAErBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,SAAOG,KAAK,OAAOC,MAAOtB,EAAOuB,SAzBXC,IACxBvB,EAASuB,EAAEC,OAAOH,MAAM,KAyBtBJ,EAAAA,EAAAA,KAAA,UAAQQ,QAhDSC,UACnB,IACE,MAGMC,SAHiBC,EAAAA,EAAAA,IAAU,qDAADC,OAVtB,mCAWoD,WAAAA,OAAU9B,KAEtC+B,KAAKC,QAEjCC,EAAS,IAAI1B,gBAAgBT,EAASU,QAC5CyB,EAAOC,IAAI,QAASlC,GAEpBU,aAAaC,QAAQ,eAAgB,UACrCD,aAAaC,QAAQ,QAASX,GAE9BI,EAAkBwB,GAClBlB,aAAaC,QAAQ,iBAAkBG,KAAKqB,UAAUP,IAEtDhC,EAAS,IAADkC,OAAKG,EAAOG,YAGtB,CAFE,MAAOC,GACPC,QAAQD,MAAM,0BAA2BA,EAC3C,GA6BgCpB,SAAC,YAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SACGd,EAAeoC,KAAIC,IAClBtB,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAE,WAAAU,OAAaU,EAAMC,IAAKxB,SAAEuB,EAAME,SADjCF,EAAMC,UAKf,C","sources":["components/Movies.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\n\nconst API_KEY = '6275ff62c216e0d575843f8efbbe5c76';\n\nconst Movies = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [query, setQuery] = useState('');\n  const [previousMovies, setPreviousMovies] = useState([]);\n\n  const searchMovies = async () => {\n    try {\n      const response = await axios.get(\n        `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`\n      );\n      const newSearchResults = response.data.results;\n\n      const params = new URLSearchParams(location.search);\n      params.set('query', query);\n\n      localStorage.setItem('previousPage', 'movies');\n      localStorage.setItem('query', query);\n\n      setPreviousMovies(newSearchResults);\n      localStorage.setItem('previousMovies', JSON.stringify(newSearchResults));\n\n      navigate(`?${params.toString()}`);\n    } catch (error) {\n      console.error('Error searching movies:', error);\n    }\n  };\n\n  const handleInputChange = e => {\n    setQuery(e.target.value);\n  };\n\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const queryParam = params.get('query') || '';\n    setQuery(queryParam);\n\n    localStorage.setItem('previousPage', 'movies');\n    localStorage.setItem('query', queryParam);\n\n    const storedPreviousMovies = localStorage.getItem('previousMovies');\n    if (storedPreviousMovies) {\n      setPreviousMovies(JSON.parse(storedPreviousMovies));\n    }\n  }, [location.search]);\n\n  return (\n    <div>\n      <div>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/movies\">Movies</Link>\n      </div>\n      <h2>Search Movies</h2>\n      <input type=\"text\" value={query} onChange={handleInputChange} />\n      <button onClick={searchMovies}>Search</button>\n      <ul>\n        {previousMovies.map(movie => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;"],"names":["Movies","navigate","useNavigate","location","useLocation","query","setQuery","useState","previousMovies","setPreviousMovies","useEffect","queryParam","URLSearchParams","search","get","localStorage","setItem","storedPreviousMovies","getItem","JSON","parse","_jsxs","children","_jsx","Link","to","type","value","onChange","e","target","onClick","async","newSearchResults","axios","concat","data","results","params","set","stringify","toString","error","console","map","movie","id","title"],"sourceRoot":""}